+ 30/10/2023
- xóa project cũ
- đã làm lại tất cả với ms sql server
- test date trong bảng user và datetime trong bảng blogcomment là ok ko có lỗi gì
- chia folder Controllers cho ADMIN và HOME
- DTO không chia cho việc sử dụng chung
-- Repositories không chia
 - đổi tên Object thành Implementations
- Helper giữ nguyên

+ 31/10/2023
- đã thêm Plan.txt: mục đích xây plan dần dần và bám theo(gồm viết API và giao diện)
- đã thêm Interface.doc: mục đích hình dung được giao diện cần xây, thống nhất tránh sai sót về sau
- hủy bỏ F8DB
- sử dụng database mới OLS

+ 01/11/2023
- xem chi tiết và học khóa học
- sử dụng session như chức năng giỏ hàng?
- nếu chưa đky -> đến trang đky khóa học + trả tiền(qr pay) -> nếu xong ok -> insert CourseEnrolled
- course -> chapter -> lesson

+ 02/11/2023
- config ols-ui - reactapp

+ 07/12/2023
-- Front-end
- Khung LearningPaths - chưa xong - còn bug 
- Xây cấu trúc UI dự án
- Đồng bộ chạy cùng API
- Xử lý memory leak khi API được request liên tục bằng useEffect
- Bất đồng bộ async 
- Khá hoàn thiện - còn 1 số bug HomePage

-- Back-end 
- Modified về phần readDTO phía HomePage 
- Cors trong Program.cs để phía Front-end lấy được API
- Khá hoàn thiện - còn 1 số bug

-- Database 
- Vấn đề trường dữ liệu quá nhỏ -> phải tăng lên 
- Khó khăn cho việc làm tool lấy API tự động

- Chưa nối FK từ discuss khóa học đến user 

- Hoàn thiện ui LearningPaths 
- Chưa tối ưu hóa

+ 08/12/2023
--- Home 
- UI settings --> hoàn thiện
- UI course detail --> hoàn thiện 
- UI payment --> hoàn thiện 
- UI CourseInProgress --> hoàn thiện
    - Xử lý luồng chạy side bar --> ok

==============
- UI blog
- UI blog manager
==============

+ Default layout, HeaderOnly 
+ Viết hoa chữ cái đầu comment 

+ 9/12/2023
--- Admin 
+ ManagerLayout --> hoàn thiện 
- isActive --> chưa 
- Header --> hoàn thiện 
- Sidebar --> hoàn thiện, sẽ tối ưu - chưa comment hóa được vì logic khá phức tạp và k có nhiều thời gian 
- Footer --> hoàn thiện 
- tag main cho components với default layout - check lại --> hoàn thiện - chưa hết 

+ Xử lý cơ chế chuyển layout theo role - check isAdmin --> hoàn thiện - chưa tối ưu 
- Fix xử lý routes theo role --> hoàn thiện 
- ManagerLayout dựng khung hoạt động --> hoàn thiện 
- UI user manager --> 
- UI learning paths --> 
    - UI chapter manager --> 
    - UI course manager --> 
    - UI lesson manager --> 

+ 10/12/2023 
- UI login --> hoàn thiện 
- UI register --> hoàn thiện 
- UI forgot password --> hoàn thiện 
- UI reset password --> hoàn thiện 
- Xử lý phần (...) dọc header --> chưa hoàn thiện s

+ 14/12/2023 
- Xử lý logic đăng ký khóa học --> hoàn thiện 
- Course details --> hoàn thiện 
- Course inprogress --> đang hoàn thiện 

+ 17/12/2023 
- CMS - UI 
- Dashboard --> hoàn thiện
- User manager --> hoàn thiện 
- Learning paths manager --> hoàn thiện 
- Course manager --> đang hoàn thiện 
- Lesson manager --> đang hoàn thiện 

+ 18/12/2023
- Tiếp tục hoàn thiện 

+ 19/12/2023 
- Nhiệm vụ - Đạt 
- Ý tưởng UI Blog + Blog manager --> đọc trong Interfaces.docx kéo xuống 
- luông xử lý router đã hoàn thiện 

+ Làm Blog cho người dùng 
- chọn pages
- chọn Home 
- trong Home có Blogs và BlogDetails --> làm giao diện vào đấy
- viết scss trong module.scss 
--> cần xử lý logic gọi API

+ Làm Blog manager 
- chọn pages
- chọn Admin 
- chọn BlogManager 
- viết scss trong module.scss 
--> cần xử lý logic gọi API

+ UI phần Login, Register, Forgot, Reset password đã hoàn thiện 
--> cần xử lý logic gọi API
- chọn pages
- chọn Home
- trong Home sẽ có 

+ Logic chia role sau khi đăng nhập 
- chọn App.js
- nếu role = admin --> đưa đến {/* Admin */}
- nếu role = customer --> đưa đến {/* Home */}

--> cần xử lý đưa routes chức năng vào private routes
- chọn routes dưới pages 
--> xem 

- chọn config
--> xem 

+ User profile 
- có thể tùy biến giao diện theo yêu cầu bài toán 
--> cần xử lý logic gọi API

+ Settings 
- có thể tùy biến giao diện theo yêu cầu bài toán 
--> cần xử lý logic gọi API

+ Nhiệm vụ - Kiên - đang hoàn thiện các phần còn lại 


+ 24/12/2023 

- Cá nhân nghĩ
- hiện tại phía payload đưa về request đúng --> password đang so sánh với hashmap 
- mà hashmap sinh ra là độc nhất 
+ đọc doc 
MD5 là một thuật toán băm (hashing algorithm) tạo ra một chuỗi hash 
cố định dựa trên dữ liệu đầu vào. Thuật toán này được thiết kế để tạo ra 
một chuỗi hash độc nhất cho mỗi đầu vào duy nhất, 
nhưng không phải là một chuỗi hash duy nhất trên toàn thế giới.

--> phải xử lý hashmap phía frontend để so sánh với dât phần back end 
--> có thể nghĩ cách khác hay không thì tùy.
